var w=Object.defineProperty;var B=(s,e,t)=>e in s?w(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var o=(s,e,t)=>B(s,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))n(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const u of i.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&n(u)}).observe(document,{childList:!0,subtree:!0});function t(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(r){if(r.ep)return;r.ep=!0;const i=t(r);fetch(r.href,i)}})();const y=`
@group(0) @binding(0) var<uniform> cameraMatrix: mat4x4<f32>;
@group(0) @binding(1) var<uniform> winodwSize: vec2f;
@group(0) @binding(2) var<uniform> modelMatrix: mat4x4<f32>;


struct VertexInput {
    @location(0) position: vec4f,
};


struct MaterialInput {
    @location(1) color: vec4f
};


struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) color: vec4f
};

@vertex
fn main(input: VertexInput, material: MaterialInput) -> VertexOutput {
    var output: VertexOutput;


    output.position = modelMatrix * vec4f( input.position[0], input.position[1], input.position[2], 1);
    output.color = material.color;


    return output;
}
`,M=`
@fragment
fn main(@location(0) color: vec4<f32>) -> @location(0) vec4f {
    return color;  // Возвращаем цвет вершины
}
`;class l{constructor(){o(this,"elements");this.elements=new Array(16).fill(0),this.identity()}identity(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}multiply(e){const t=new l;for(let n=0;n<4;n++)for(let r=0;r<4;r++){t.elements[n*4+r]=0;for(let i=0;i<4;i++)t.elements[n*4+r]+=this.elements[n*4+i]*e.elements[i*4+r]}return t}translate(e,t,n){return this.elements[12]+=e,this.elements[13]+=t,this.elements[14]+=n,this}rotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.elements[5]=t,this.elements[6]=n,this.elements[9]=-n,this.elements[10]=t,this}rotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.elements[0]=t,this.elements[8]=n,this.elements[2]=-n,this.elements[10]=t,this}ortho(e,t,n,r,i,u){const a=this.elements;return a[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(r-n),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(i-u),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(r+n)/(n-r),a[14]=i/(i-u),a[15]=1,a}}var x=(s=>(s[s.Draw=0]="Draw",s[s.DrawIndexed=1]="DrawIndexed",s))(x||{});class S{constructor(e,t){o(this,"context");o(this,"device");o(this,"canvasTexture");o(this,"renderPassDescriptor");o(this,"depthTexture");o(this,"objectsToRender",[]);o(this,"cameraMatrix");o(this,"uniformBufferCamera");o(this,"windowSize",[0,0]);o(this,"uniformBufferWindowSize");this.context=e,this.device=t,this.cameraMatrix=new l,this.canvasTexture=this.context.getCurrentTexture(),this.renderPassDescriptor={label:"renderPassDescriptor",colorAttachments:[{view:this.canvasTexture.createView(),clearValue:{r:.1,g:0,b:.1,a:.9},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:this.canvasTexture.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},this.uniformBufferCamera=this.device.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.uniformBufferWindowSize=this.device.createBuffer({size:8,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})}addToRender(e){this.objectsToRender.push(e)}updateBundingGroups(e,t){const n=new Float32Array(this.cameraMatrix.elements);this.device.queue.writeBuffer(this.uniformBufferCamera,0,n);const r=new Float32Array(this.windowSize);return this.device.queue.writeBuffer(this.uniformBufferWindowSize,0,r),this.device.createBindGroup({label:"updateBundingGroups",layout:e,entries:[{binding:0,resource:{buffer:this.uniformBufferCamera}},{binding:1,resource:{buffer:this.uniformBufferWindowSize}},{binding:2,resource:{buffer:t}}]})}render(e){const t=this.context.getCurrentTexture();this.renderPassDescriptor.colorAttachments[0].view=t.createView(),(!this.depthTexture||this.depthTexture.width!==t.width||this.depthTexture.height!==t.height)&&(this.depthTexture&&this.depthTexture.destroy(),this.depthTexture=this.device.createTexture({size:[t.width,t.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT})),this.renderPassDescriptor.depthStencilAttachment.view=this.depthTexture.createView();const n=this.device.createCommandEncoder(),r=n.beginRenderPass(this.renderPassDescriptor);for(let i=0;i<e.length;i++){const u=e[i];u.bindGroup||(u.bindGroup=this.updateBundingGroups(u.bindGroupLayout,u.uniformBufferModelMatrix)),r.setPipeline(u.pipeline),r.setBindGroup(0,u.bindGroup),r.setVertexBuffer(0,u.buffers.vertex),r.setIndexBuffer(u.buffers.index,"uint16"),r.setVertexBuffer(1,u.colorBuffer),r.drawIndexed(3)}r.end(),this.device.queue.submit([n.finish()])}}class P{constructor(e){o(this,"device");o(this,"drawType",x.DrawIndexed);o(this,"vertexShaderWGSL",y);o(this,"fragmentShaderWGSL",M);o(this,"uniforms",[]);o(this,"buffers",{index:void 0,vertex:void 0,other:[]});o(this,"colorBuffer");o(this,"vertex",[0,.02,0,-.02,-.02,0,.02,-.02,0]);o(this,"index",[0,1,2]);o(this,"material",{color:[.5,.2,.8,.8,.5,.2,.8,.8,.5,.2,.8,.8]});o(this,"bindGroupLayout");o(this,"pipeline");o(this,"uniformBufferModelMatrix");o(this,"modelMatrix");o(this,"bindGroup");o(this,"renderOptions",{primitive:{topology:"triangle-list"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"},blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha"}}});this.device=e,this.modelMatrix=new l,this.bindGroupLayout=this.updateBindingGroupLayout();const t=new Float32Array(this.vertex);this.buffers.vertex=e.createBuffer({size:t.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,mappedAtCreation:!0}),new Float32Array(this.buffers.vertex.getMappedRange()).set(t),this.buffers.vertex.unmap();const n=new Float32Array(this.index),r=Math.ceil(n.byteLength/4)*4;this.buffers.index=e.createBuffer({size:r,usage:GPUBufferUsage.INDEX,mappedAtCreation:!0}),new Uint16Array(this.buffers.index.getMappedRange()).set(n),this.buffers.index.unmap();const i=new Float32Array(this.material.color);this.colorBuffer=e.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),this.device.queue.writeBuffer(this.colorBuffer,0,i),this.uniformBufferModelMatrix=this.device.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.pipeline=this.updatePipeline()}updateModelMatrix(){const e=new Float32Array(this.modelMatrix.elements);this.device.queue.writeBuffer(this.uniformBufferModelMatrix,0,e)}updateMaterial(){const e=new Float32Array(this.material.color);this.device.queue.writeBuffer(this.colorBuffer,0,e)}updateBindingGroupLayout(){return this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]})}updatePipeline(){return this.device.createRenderPipeline({layout:this.bindGroupLayout?this.device.createPipelineLayout({bindGroupLayouts:[this.bindGroupLayout]}):"auto",vertex:{module:this.device.createShaderModule({code:this.vertexShaderWGSL}),entryPoint:"main",buffers:[{arrayStride:3*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,offset:0,format:"float32x3"}]},{arrayStride:2*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:1,offset:0,format:"float32x2"}]}]},fragment:{module:this.device.createShaderModule({code:this.fragmentShaderWGSL}),entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:this.renderOptions.blend}]},primitive:this.renderOptions.primitive,depthStencil:this.renderOptions.depthStencil})}}const f=document.getElementById("gpuCanvas");function v(){const s=window.devicePixelRatio||1,e=Math.floor(f.clientWidth*s),t=Math.floor(f.clientHeight*s);f.width=e,f.height=t}v();window.addEventListener("resize",v);async function G(){const s=document.getElementById("gpuCanvas"),e=await navigator.gpu.requestAdapter(),t=await(e==null?void 0:e.requestDevice());if(!t){console.error("WebGPU device initialization failed.");return}const n=s.getContext("webgpu"),r=navigator.gpu.getPreferredCanvasFormat();n.configure({device:t,format:r,alphaMode:"premultiplied"});const i=[];function u(d,c){return Math.floor(Math.random()*(c-d+1))+d}for(let d=0;d<5500;d++){const c=new P(t);c.modelMatrix.ortho(0,2,2,0,400,-400),c.modelMatrix.translate(u(-100,100)/100+1,u(-100,100)/100-1,0),i.push(c)}const a=new S(n,t);let h=0,p=0;const b=document.getElementById("fps");function m(d){d-p>200&&(b.innerText=String(Math.round(1e3/(d-h))),p=d);for(let c=0;c<i.length;c++){const g=i[c];g.modelMatrix.rotationY(d/3e3/(c/1e4)),g.updateModelMatrix()}a.windowSize=[s.width,s.height],a.render(i),h=d,requestAnimationFrame(m)}requestAnimationFrame(m)}G();
